local helper = require "penta_assets/asset_helper"

local modelList = {
    { "", "vehicle/ship/barge_big_tanker.mdl" },
    { "", "vehicle/ship/barge_small_tanker.mdl" },
    { "", "vehicle/ship/damen_ferry.mdl" },
    { "", "vehicle/ship/ds_schaffhausen.mdl" },
    { "", "vehicle/ship/dunara_castle.mdl" },
    { "", "vehicle/ship/dunara_castle_v2.mdl" },
    { "", "vehicle/ship/frontenac.mdl" },
    { "", "vehicle/ship/gms_axalp_v3.mdl" },
    { "", "vehicle/ship/graf_zeppelin.mdl" },
    { "", "vehicle/ship/herkules_xi.mdl" },
    { "", "vehicle/ship/herkules_xi_tanker.mdl" },
    { "", "vehicle/ship/herkules_xi_tanker_v2.mdl" },
    { "", "vehicle/ship/herkules_xi_v2.mdl" },
    { "", "vehicle/ship/klondike_v3.mdl" },
    { "", "vehicle/ship/merlin_v3.mdl" },
    { "", "vehicle/ship/rigi.mdl" },
    { "", "vehicle/ship/srn6.mdl" },
    { "", "vehicle/ship/vandal_v2.mdl" },
    { "", "vehicle/ship/viola_v2.mdl" },
    { "", "vehicle/ship/virgo.mdl" },
    { "", "vehicle/ship/virgo_tanker.mdl" },
    { "", "vehicle/ship/virgo_tanker_v2.mdl" },
    { "", "vehicle/ship/virgo_v2.mdl" },
    { "", "vehicle/ship/votrans.mdl" },
    { "", "vehicle/ship/votrans_tanker.mdl" },
    { "", "vehicle/ship/wilhelm_v3.mdl" },
    { "", "vehicle/ship/zoroaster_v2.mdl" },
    { "", "vehicle/ship/zoroaster_v3.mdl" },
    { "", "vehicle/ship/zurich.mdl" },
}

function data()

    return {
        type = "ASSET_DEFAULT",
        description = {
            name = "Ships",
            description = "All vanilla ships",
        },
        availability = {
            yearFrom = 1850,
            yearTo = 0,
        },
        buildMode = "MULTI",
        categories = { "vehicles" },
        order = 100,
        skipCollision = true,
        autoRemovable = false,

        params = {
            {
                key = "asset",
                name = "Ships",
                uiType = "BUTTON", -- "ICON_BUTTON",
                values = helper.getButtonValues(modelList, 1), -- helper.getButtonValues(modelList, 0)
            },
            {
                key = "asset_size",
                name = "Scale",
                uiType = "SLIDER",
                values = { "0.10x", "0.25x", "0.5x", "0.75x", "1.0x", "1.5x", "2.0x" },
                defaultIndex = 3,
                tooltip = "Scales the asset's size.",
            },
            --{
            --    key = "terrain_alignment",
            --    name = "Align to terrain",
            --    uiType = "CHECKBOX",
            --    values = { "0", "1" },
            --    defaultIndex = 0,
            --},
        },

        updateFn = function(params)
            local result = {}

            result.models = {}

            local size = 1.0
            --local alignment = false

            if params.asset_size == 0 then size = 0.1 end
            if params.asset_size == 1 then size = 0.25 end
            if params.asset_size == 2 then size = 0.5 end
            if params.asset_size == 3 then size = 0.75 end
            if params.asset_size == 4 then size = 1.0 end -- default
            if params.asset_size == 5 then size = 1.5 end
            if params.asset_size == 6 then size = 2.0 end

            --if params.terrain_alignment == 0 then alignment = false end
            --if params.terrain_alignment == 1 then alignment = true end

            for i = 0, #modelList - 1, 1 do
                if params.asset == i then
                    result.models[#result.models + 1] = {
                        id = modelList[i + 1][1],
                        transf = { 1 * size, 0, 0, 0, 0, 1 * size, 0, 0, 0, 0, 1 * size, 0, 0, 0, 0, 1 }
                    }
                end
            end

            result.terrainAlignmentLists = {
                { type = "EQUAL", faces = {} }
            }

            return result
        end
    }

end
