local helper = require "penta_assets/asset_helper"

local MODELS = {
  { "Brown Cow", "animal/cow.mdl" },
  { "Black Cow", "animal/cow_2.mdl" },
  { "Horse", "animal/horse.mdl" },
  { "Draft Horse", "animal/draft_horse.mdl" },
  { "Sheep", "animal/sheep.mdl" },
  { "Bear", "animal/wildlife_bear.mdl" },
  { "Dear", "animal/wildlife_deer.mdl" },
  { "Fox", "animal/wildlife_fox.mdl" },
  { "Crane", "animal/bird_crane.mdl" },
  { "Eagle", "animal/bird_eagle.mdl" },
  { "Seagull", "animal/bird_gull.mdl" },
  { "Salmon", "animal/fish_salmon.mdl" },
}
local SCALE_FACTORS = { 0.1, 0.25, 0.5, 0.75, 1, 1.5, 2 }
local MODEL_NAME_INDEX = 1
local MODEL_URI_INDEX = 2

-- ================================================================== --

function data()

  return {
    type = "ASSET_DEFAULT",
    description = {
      name = "Animals",
      description = "All vanilla animals",
    },
    availability = {
      yearFrom = 1850,
      yearTo = 0,
    },
    buildMode = "MULTI",
    categories = { "nature" },
    order = 100,
    skipCollision = true,
    autoRemovable = false,

    params = {
      {
        key = "assets",
        name = "Animals",
        uiType = "BUTTON", -- "ICON_BUTTON",
        values = helper.getButtonValues(MODELS), -- helper.getIconValues(MODELS)
      },
      {
        key = "asset_scales",
        name = "Scale",
        uiType = "SLIDER",
        values = { "0.10x", "0.25x", "0.5x", "0.75x", "1.0x", "1.5x", "2.0x" },
        defaultIndex = 4,
        tooltip = "Scales the asset's size.",
      },
    },

    updateFn = function(params)
      -- because lua is one-indexed, but the parameter value is zero-indexed:
      local selected_model_index = params.assets + 1
      local selected_scale_index = params.asset_scale + 1
      local selected_scale = SCALE_FACTORS[selected_scale_index]
      local result = {}
      result.models = {}

      result.models = {
        {
          id = MODELS[selected_model_index][MODEL_URI_INDEX],
          transf = {
            1 * selected_scale, 0, 0, 0, 0,
            1 * selected_scale, 0, 0, 0, 0,
            1 * selected_scale, 0, 0, 0, 0, 1
          }
        }
      }

      result.terrainAlignmentLists = {
        { type = "EQUAL", faces = {} }
      }

      return result
    end
  }

end
